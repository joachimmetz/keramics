/* Copyright 2024-2025 Joachim Metz <joachim.metz@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

use keramics_core::ErrorTrace;
use keramics_encodings::{DecoderKoi8U, EncoderKoi8U};

const KOI8U_TEST_VECTOR: [(u32, &'static [u8]); 256] = [
    (0x0000, &[0x00]),
    (0x0001, &[0x01]),
    (0x0002, &[0x02]),
    (0x0003, &[0x03]),
    (0x0004, &[0x04]),
    (0x0005, &[0x05]),
    (0x0006, &[0x06]),
    (0x0007, &[0x07]),
    (0x0008, &[0x08]),
    (0x0009, &[0x09]),
    (0x000a, &[0x0a]),
    (0x000b, &[0x0b]),
    (0x000c, &[0x0c]),
    (0x000d, &[0x0d]),
    (0x000e, &[0x0e]),
    (0x000f, &[0x0f]),
    (0x0010, &[0x10]),
    (0x0011, &[0x11]),
    (0x0012, &[0x12]),
    (0x0013, &[0x13]),
    (0x0014, &[0x14]),
    (0x0015, &[0x15]),
    (0x0016, &[0x16]),
    (0x0017, &[0x17]),
    (0x0018, &[0x18]),
    (0x0019, &[0x19]),
    (0x001a, &[0x1a]),
    (0x001b, &[0x1b]),
    (0x001c, &[0x1c]),
    (0x001d, &[0x1d]),
    (0x001e, &[0x1e]),
    (0x001f, &[0x1f]),
    (0x0020, &[0x20]),
    (0x0021, &[0x21]),
    (0x0022, &[0x22]),
    (0x0023, &[0x23]),
    (0x0024, &[0x24]),
    (0x0025, &[0x25]),
    (0x0026, &[0x26]),
    (0x0027, &[0x27]),
    (0x0028, &[0x28]),
    (0x0029, &[0x29]),
    (0x002a, &[0x2a]),
    (0x002b, &[0x2b]),
    (0x002c, &[0x2c]),
    (0x002d, &[0x2d]),
    (0x002e, &[0x2e]),
    (0x002f, &[0x2f]),
    (0x0030, &[0x30]),
    (0x0031, &[0x31]),
    (0x0032, &[0x32]),
    (0x0033, &[0x33]),
    (0x0034, &[0x34]),
    (0x0035, &[0x35]),
    (0x0036, &[0x36]),
    (0x0037, &[0x37]),
    (0x0038, &[0x38]),
    (0x0039, &[0x39]),
    (0x003a, &[0x3a]),
    (0x003b, &[0x3b]),
    (0x003c, &[0x3c]),
    (0x003d, &[0x3d]),
    (0x003e, &[0x3e]),
    (0x003f, &[0x3f]),
    (0x0040, &[0x40]),
    (0x0041, &[0x41]),
    (0x0042, &[0x42]),
    (0x0043, &[0x43]),
    (0x0044, &[0x44]),
    (0x0045, &[0x45]),
    (0x0046, &[0x46]),
    (0x0047, &[0x47]),
    (0x0048, &[0x48]),
    (0x0049, &[0x49]),
    (0x004a, &[0x4a]),
    (0x004b, &[0x4b]),
    (0x004c, &[0x4c]),
    (0x004d, &[0x4d]),
    (0x004e, &[0x4e]),
    (0x004f, &[0x4f]),
    (0x0050, &[0x50]),
    (0x0051, &[0x51]),
    (0x0052, &[0x52]),
    (0x0053, &[0x53]),
    (0x0054, &[0x54]),
    (0x0055, &[0x55]),
    (0x0056, &[0x56]),
    (0x0057, &[0x57]),
    (0x0058, &[0x58]),
    (0x0059, &[0x59]),
    (0x005a, &[0x5a]),
    (0x005b, &[0x5b]),
    (0x005c, &[0x5c]),
    (0x005d, &[0x5d]),
    (0x005e, &[0x5e]),
    (0x005f, &[0x5f]),
    (0x0060, &[0x60]),
    (0x0061, &[0x61]),
    (0x0062, &[0x62]),
    (0x0063, &[0x63]),
    (0x0064, &[0x64]),
    (0x0065, &[0x65]),
    (0x0066, &[0x66]),
    (0x0067, &[0x67]),
    (0x0068, &[0x68]),
    (0x0069, &[0x69]),
    (0x006a, &[0x6a]),
    (0x006b, &[0x6b]),
    (0x006c, &[0x6c]),
    (0x006d, &[0x6d]),
    (0x006e, &[0x6e]),
    (0x006f, &[0x6f]),
    (0x0070, &[0x70]),
    (0x0071, &[0x71]),
    (0x0072, &[0x72]),
    (0x0073, &[0x73]),
    (0x0074, &[0x74]),
    (0x0075, &[0x75]),
    (0x0076, &[0x76]),
    (0x0077, &[0x77]),
    (0x0078, &[0x78]),
    (0x0079, &[0x79]),
    (0x007a, &[0x7a]),
    (0x007b, &[0x7b]),
    (0x007c, &[0x7c]),
    (0x007d, &[0x7d]),
    (0x007e, &[0x7e]),
    (0x007f, &[0x7f]),
    (0x2500, &[0x80]),
    (0x2502, &[0x81]),
    (0x250c, &[0x82]),
    (0x2510, &[0x83]),
    (0x2514, &[0x84]),
    (0x2518, &[0x85]),
    (0x251c, &[0x86]),
    (0x2524, &[0x87]),
    (0x252c, &[0x88]),
    (0x2534, &[0x89]),
    (0x253c, &[0x8a]),
    (0x2580, &[0x8b]),
    (0x2584, &[0x8c]),
    (0x2588, &[0x8d]),
    (0x258c, &[0x8e]),
    (0x2590, &[0x8f]),
    (0x2591, &[0x90]),
    (0x2592, &[0x91]),
    (0x2593, &[0x92]),
    (0x2320, &[0x93]),
    (0x25a0, &[0x94]),
    (0x2219, &[0x95]),
    (0x221a, &[0x96]),
    (0x2248, &[0x97]),
    (0x2264, &[0x98]),
    (0x2265, &[0x99]),
    (0x00a0, &[0x9a]),
    (0x2321, &[0x9b]),
    (0x00b0, &[0x9c]),
    (0x00b2, &[0x9d]),
    (0x00b7, &[0x9e]),
    (0x00f7, &[0x9f]),
    (0x2550, &[0xa0]),
    (0x2551, &[0xa1]),
    (0x2552, &[0xa2]),
    (0x0451, &[0xa3]),
    (0x0454, &[0xa4]),
    (0x2554, &[0xa5]),
    (0x0456, &[0xa6]),
    (0x0457, &[0xa7]),
    (0x2557, &[0xa8]),
    (0x2558, &[0xa9]),
    (0x2559, &[0xaa]),
    (0x255a, &[0xab]),
    (0x255b, &[0xac]),
    (0x0491, &[0xad]),
    (0x255d, &[0xae]),
    (0x255e, &[0xaf]),
    (0x255f, &[0xb0]),
    (0x2560, &[0xb1]),
    (0x2561, &[0xb2]),
    (0x0401, &[0xb3]),
    (0x0404, &[0xb4]),
    (0x2563, &[0xb5]),
    (0x0406, &[0xb6]),
    (0x0407, &[0xb7]),
    (0x2566, &[0xb8]),
    (0x2567, &[0xb9]),
    (0x2568, &[0xba]),
    (0x2569, &[0xbb]),
    (0x256a, &[0xbc]),
    (0x0490, &[0xbd]),
    (0x256c, &[0xbe]),
    (0x00a9, &[0xbf]),
    (0x044e, &[0xc0]),
    (0x0430, &[0xc1]),
    (0x0431, &[0xc2]),
    (0x0446, &[0xc3]),
    (0x0434, &[0xc4]),
    (0x0435, &[0xc5]),
    (0x0444, &[0xc6]),
    (0x0433, &[0xc7]),
    (0x0445, &[0xc8]),
    (0x0438, &[0xc9]),
    (0x0439, &[0xca]),
    (0x043a, &[0xcb]),
    (0x043b, &[0xcc]),
    (0x043c, &[0xcd]),
    (0x043d, &[0xce]),
    (0x043e, &[0xcf]),
    (0x043f, &[0xd0]),
    (0x044f, &[0xd1]),
    (0x0440, &[0xd2]),
    (0x0441, &[0xd3]),
    (0x0442, &[0xd4]),
    (0x0443, &[0xd5]),
    (0x0436, &[0xd6]),
    (0x0432, &[0xd7]),
    (0x044c, &[0xd8]),
    (0x044b, &[0xd9]),
    (0x0437, &[0xda]),
    (0x0448, &[0xdb]),
    (0x044d, &[0xdc]),
    (0x0449, &[0xdd]),
    (0x0447, &[0xde]),
    (0x044a, &[0xdf]),
    (0x042e, &[0xe0]),
    (0x0410, &[0xe1]),
    (0x0411, &[0xe2]),
    (0x0426, &[0xe3]),
    (0x0414, &[0xe4]),
    (0x0415, &[0xe5]),
    (0x0424, &[0xe6]),
    (0x0413, &[0xe7]),
    (0x0425, &[0xe8]),
    (0x0418, &[0xe9]),
    (0x0419, &[0xea]),
    (0x041a, &[0xeb]),
    (0x041b, &[0xec]),
    (0x041c, &[0xed]),
    (0x041d, &[0xee]),
    (0x041e, &[0xef]),
    (0x041f, &[0xf0]),
    (0x042f, &[0xf1]),
    (0x0420, &[0xf2]),
    (0x0421, &[0xf3]),
    (0x0422, &[0xf4]),
    (0x0423, &[0xf5]),
    (0x0416, &[0xf6]),
    (0x0412, &[0xf7]),
    (0x042c, &[0xf8]),
    (0x042b, &[0xf9]),
    (0x0417, &[0xfa]),
    (0x0428, &[0xfb]),
    (0x042d, &[0xfc]),
    (0x0429, &[0xfd]),
    (0x0427, &[0xfe]),
    (0x042a, &[0xff]),
];

#[test]
fn decode() -> Result<(), ErrorTrace> {
    for (expected_code_point, test_byte_string) in KOI8U_TEST_VECTOR.iter() {
        let mut decoder: DecoderKoi8U = DecoderKoi8U::new(test_byte_string);

        let test_code_point: u32 = match decoder.next() {
            Some(Ok(code_point)) => code_point,
            Some(Err(error)) => return Err(error),
            None => {
                return Err(keramics_core::error_trace_new!(format!(
                    "Failed to decode KOI8-U as code_point: U+{:04x}",
                    *expected_code_point as u32
                )));
            }
        };
        assert_eq!(test_code_point, *expected_code_point);
    }
    Ok(())
}

#[test]
fn encode() -> Result<(), ErrorTrace> {
    for (test_code_point, expected_byte_string) in KOI8U_TEST_VECTOR.iter() {
        let code_points: [u32; 1] = [*test_code_point];
        let mut encoder: EncoderKoi8U = EncoderKoi8U::new(&code_points);

        let test_byte_string: Vec<u8> = match encoder.next() {
            Some(Ok(byte_string)) => byte_string,
            Some(Err(error)) => return Err(error),
            None => {
                return Err(keramics_core::error_trace_new!(format!(
                    "Failed to encode code point: U+{:04x} as KOI8-U",
                    *test_code_point as u32
                )));
            }
        };
        assert_eq!(test_byte_string, *expected_byte_string);
    }
    Ok(())
}
