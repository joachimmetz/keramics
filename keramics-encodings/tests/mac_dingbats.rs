/* Copyright 2024-2025 Joachim Metz <joachim.metz@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

use keramics_core::ErrorTrace;
use keramics_encodings::{DecoderMacDingbats, EncoderMacDingbats};

const MAC_DINGBATS_TEST_VECTOR: [(u32, &'static [u8]); 235] = [
    (0x0000, &[0x00]),
    (0x0001, &[0x01]),
    (0x0002, &[0x02]),
    (0x0003, &[0x03]),
    (0x0004, &[0x04]),
    (0x0005, &[0x05]),
    (0x0006, &[0x06]),
    (0x0007, &[0x07]),
    (0x0008, &[0x08]),
    (0x0009, &[0x09]),
    (0x000a, &[0x0a]),
    (0x000b, &[0x0b]),
    (0x000c, &[0x0c]),
    (0x000d, &[0x0d]),
    (0x000e, &[0x0e]),
    (0x000f, &[0x0f]),
    (0x0010, &[0x10]),
    (0x0011, &[0x11]),
    (0x0012, &[0x12]),
    (0x0013, &[0x13]),
    (0x0014, &[0x14]),
    (0x0015, &[0x15]),
    (0x0016, &[0x16]),
    (0x0017, &[0x17]),
    (0x0018, &[0x18]),
    (0x0019, &[0x19]),
    (0x001a, &[0x1a]),
    (0x001b, &[0x1b]),
    (0x001c, &[0x1c]),
    (0x001d, &[0x1d]),
    (0x001e, &[0x1e]),
    (0x001f, &[0x1f]),
    (0x0020, &[0x20]),
    (0x2701, &[0x21]),
    (0x2702, &[0x22]),
    (0x2703, &[0x23]),
    (0x2704, &[0x24]),
    (0x260e, &[0x25]),
    (0x2706, &[0x26]),
    (0x2707, &[0x27]),
    (0x2708, &[0x28]),
    (0x2709, &[0x29]),
    (0x261b, &[0x2a]),
    (0x261e, &[0x2b]),
    (0x270c, &[0x2c]),
    (0x270d, &[0x2d]),
    (0x270e, &[0x2e]),
    (0x270f, &[0x2f]),
    (0x2710, &[0x30]),
    (0x2711, &[0x31]),
    (0x2712, &[0x32]),
    (0x2713, &[0x33]),
    (0x2714, &[0x34]),
    (0x2715, &[0x35]),
    (0x2716, &[0x36]),
    (0x2717, &[0x37]),
    (0x2718, &[0x38]),
    (0x2719, &[0x39]),
    (0x271a, &[0x3a]),
    (0x271b, &[0x3b]),
    (0x271c, &[0x3c]),
    (0x271d, &[0x3d]),
    (0x271e, &[0x3e]),
    (0x271f, &[0x3f]),
    (0x2720, &[0x40]),
    (0x2721, &[0x41]),
    (0x2722, &[0x42]),
    (0x2723, &[0x43]),
    (0x2724, &[0x44]),
    (0x2725, &[0x45]),
    (0x2726, &[0x46]),
    (0x2727, &[0x47]),
    (0x2605, &[0x48]),
    (0x2729, &[0x49]),
    (0x272a, &[0x4a]),
    (0x272b, &[0x4b]),
    (0x272c, &[0x4c]),
    (0x272d, &[0x4d]),
    (0x272e, &[0x4e]),
    (0x272f, &[0x4f]),
    (0x2730, &[0x50]),
    (0x2731, &[0x51]),
    (0x2732, &[0x52]),
    (0x2733, &[0x53]),
    (0x2734, &[0x54]),
    (0x2735, &[0x55]),
    (0x2736, &[0x56]),
    (0x2737, &[0x57]),
    (0x2738, &[0x58]),
    (0x2739, &[0x59]),
    (0x273a, &[0x5a]),
    (0x273b, &[0x5b]),
    (0x273c, &[0x5c]),
    (0x273d, &[0x5d]),
    (0x273e, &[0x5e]),
    (0x273f, &[0x5f]),
    (0x2740, &[0x60]),
    (0x2741, &[0x61]),
    (0x2742, &[0x62]),
    (0x2743, &[0x63]),
    (0x2744, &[0x64]),
    (0x2745, &[0x65]),
    (0x2746, &[0x66]),
    (0x2747, &[0x67]),
    (0x2748, &[0x68]),
    (0x2749, &[0x69]),
    (0x274a, &[0x6a]),
    (0x274b, &[0x6b]),
    (0x25cf, &[0x6c]),
    (0x274d, &[0x6d]),
    (0x25a0, &[0x6e]),
    (0x274f, &[0x6f]),
    (0x2750, &[0x70]),
    (0x2751, &[0x71]),
    (0x2752, &[0x72]),
    (0x25b2, &[0x73]),
    (0x25bc, &[0x74]),
    (0x25c6, &[0x75]),
    (0x2756, &[0x76]),
    (0x25d7, &[0x77]),
    (0x2758, &[0x78]),
    (0x2759, &[0x79]),
    (0x275a, &[0x7a]),
    (0x275b, &[0x7b]),
    (0x275c, &[0x7c]),
    (0x275d, &[0x7d]),
    (0x275e, &[0x7e]),
    (0x007f, &[0x7f]),
    (0x2768, &[0x80]),
    (0x2769, &[0x81]),
    (0x276a, &[0x82]),
    (0x276b, &[0x83]),
    (0x276c, &[0x84]),
    (0x276d, &[0x85]),
    (0x276e, &[0x86]),
    (0x276f, &[0x87]),
    (0x2770, &[0x88]),
    (0x2771, &[0x89]),
    (0x2772, &[0x8a]),
    (0x2773, &[0x8b]),
    (0x2774, &[0x8c]),
    (0x2775, &[0x8d]),
    (0x2761, &[0xa1]),
    (0x2762, &[0xa2]),
    (0x2763, &[0xa3]),
    (0x2764, &[0xa4]),
    (0x2765, &[0xa5]),
    (0x2766, &[0xa6]),
    (0x2767, &[0xa7]),
    (0x2663, &[0xa8]),
    (0x2666, &[0xa9]),
    (0x2665, &[0xaa]),
    (0x2660, &[0xab]),
    (0x2460, &[0xac]),
    (0x2461, &[0xad]),
    (0x2462, &[0xae]),
    (0x2463, &[0xaf]),
    (0x2464, &[0xb0]),
    (0x2465, &[0xb1]),
    (0x2466, &[0xb2]),
    (0x2467, &[0xb3]),
    (0x2468, &[0xb4]),
    (0x2469, &[0xb5]),
    (0x2776, &[0xb6]),
    (0x2777, &[0xb7]),
    (0x2778, &[0xb8]),
    (0x2779, &[0xb9]),
    (0x277a, &[0xba]),
    (0x277b, &[0xbb]),
    (0x277c, &[0xbc]),
    (0x277d, &[0xbd]),
    (0x277e, &[0xbe]),
    (0x277f, &[0xbf]),
    (0x2780, &[0xc0]),
    (0x2781, &[0xc1]),
    (0x2782, &[0xc2]),
    (0x2783, &[0xc3]),
    (0x2784, &[0xc4]),
    (0x2785, &[0xc5]),
    (0x2786, &[0xc6]),
    (0x2787, &[0xc7]),
    (0x2788, &[0xc8]),
    (0x2789, &[0xc9]),
    (0x278a, &[0xca]),
    (0x278b, &[0xcb]),
    (0x278c, &[0xcc]),
    (0x278d, &[0xcd]),
    (0x278e, &[0xce]),
    (0x278f, &[0xcf]),
    (0x2790, &[0xd0]),
    (0x2791, &[0xd1]),
    (0x2792, &[0xd2]),
    (0x2793, &[0xd3]),
    (0x2794, &[0xd4]),
    (0x2192, &[0xd5]),
    (0x2194, &[0xd6]),
    (0x2195, &[0xd7]),
    (0x2798, &[0xd8]),
    (0x2799, &[0xd9]),
    (0x279a, &[0xda]),
    (0x279b, &[0xdb]),
    (0x279c, &[0xdc]),
    (0x279d, &[0xdd]),
    (0x279e, &[0xde]),
    (0x279f, &[0xdf]),
    (0x27a0, &[0xe0]),
    (0x27a1, &[0xe1]),
    (0x27a2, &[0xe2]),
    (0x27a3, &[0xe3]),
    (0x27a4, &[0xe4]),
    (0x27a5, &[0xe5]),
    (0x27a6, &[0xe6]),
    (0x27a7, &[0xe7]),
    (0x27a8, &[0xe8]),
    (0x27a9, &[0xe9]),
    (0x27aa, &[0xea]),
    (0x27ab, &[0xeb]),
    (0x27ac, &[0xec]),
    (0x27ad, &[0xed]),
    (0x27ae, &[0xee]),
    (0x27af, &[0xef]),
    (0x27b1, &[0xf1]),
    (0x27b2, &[0xf2]),
    (0x27b3, &[0xf3]),
    (0x27b4, &[0xf4]),
    (0x27b5, &[0xf5]),
    (0x27b6, &[0xf6]),
    (0x27b7, &[0xf7]),
    (0x27b8, &[0xf8]),
    (0x27b9, &[0xf9]),
    (0x27ba, &[0xfa]),
    (0x27bb, &[0xfb]),
    (0x27bc, &[0xfc]),
    (0x27bd, &[0xfd]),
    (0x27be, &[0xfe]),
];

#[test]
fn decode() -> Result<(), ErrorTrace> {
    for (expected_code_point, test_byte_string) in MAC_DINGBATS_TEST_VECTOR.iter() {
        let mut decoder: DecoderMacDingbats = DecoderMacDingbats::new(test_byte_string);

        let test_code_point: u32 = match decoder.next() {
            Some(Ok(code_point)) => code_point,
            Some(Err(error)) => return Err(error),
            None => {
                return Err(keramics_core::error_trace_new!(format!(
                    "Failed to decode MacDingbats as code_point: U+{:04x}",
                    *expected_code_point as u32
                )));
            }
        };
        assert_eq!(test_code_point, *expected_code_point);
    }
    Ok(())
}

#[test]
fn encode() -> Result<(), ErrorTrace> {
    for (test_code_point, expected_byte_string) in MAC_DINGBATS_TEST_VECTOR.iter() {
        let code_points: [u32; 1] = [*test_code_point];
        let mut encoder: EncoderMacDingbats = EncoderMacDingbats::new(&code_points);

        let test_byte_string: Vec<u8> = match encoder.next() {
            Some(Ok(byte_string)) => byte_string,
            Some(Err(error)) => return Err(error),
            None => {
                return Err(keramics_core::error_trace_new!(format!(
                    "Failed to encode code point: U+{:04x} as MacDingbats",
                    *test_code_point as u32
                )));
            }
        };
        assert_eq!(test_byte_string, *expected_byte_string);
    }
    Ok(())
}
