/* Copyright 2024-2025 Joachim Metz <joachim.metz@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

use keramics_core::ErrorTrace;
use keramics_encodings::{DecoderMacArabic, EncoderMacArabic};

const MAC_ARABIC_TEST_VECTOR: [(u32, &'static [u8], bool); 256] = [
    (0x0000, &[0x00], false),
    (0x0001, &[0x01], false),
    (0x0002, &[0x02], false),
    (0x0003, &[0x03], false),
    (0x0004, &[0x04], false),
    (0x0005, &[0x05], false),
    (0x0006, &[0x06], false),
    (0x0007, &[0x07], false),
    (0x0008, &[0x08], false),
    (0x0009, &[0x09], false),
    (0x000a, &[0x0a], false),
    (0x000b, &[0x0b], false),
    (0x000c, &[0x0c], false),
    (0x000d, &[0x0d], false),
    (0x000e, &[0x0e], false),
    (0x000f, &[0x0f], false),
    (0x0010, &[0x10], false),
    (0x0011, &[0x11], false),
    (0x0012, &[0x12], false),
    (0x0013, &[0x13], false),
    (0x0014, &[0x14], false),
    (0x0015, &[0x15], false),
    (0x0016, &[0x16], false),
    (0x0017, &[0x17], false),
    (0x0018, &[0x18], false),
    (0x0019, &[0x19], false),
    (0x001a, &[0x1a], false),
    (0x001b, &[0x1b], false),
    (0x001c, &[0x1c], false),
    (0x001d, &[0x1d], false),
    (0x001e, &[0x1e], false),
    (0x001f, &[0x1f], false),
    (0x0020, &[0x20], true), // equivalent of 0xa0
    (0x0021, &[0x21], true), // equivalent of 0xa1
    (0x0022, &[0x22], true), // equivalent of 0xa2
    (0x0023, &[0x23], true), // equivalent of 0xa3
    (0x0024, &[0x24], true), // equivalent of 0xa4
    (0x0025, &[0x25], true), // equivalent of 0xa5
    (0x0026, &[0x26], true), // equivalent of 0xa6
    (0x0027, &[0x27], true), // equivalent of 0xa7
    (0x0028, &[0x28], true), // equivalent of 0xa8
    (0x0029, &[0x29], true), // equivalent of 0xa9
    (0x002a, &[0x2a], true), // equivalent of 0xaa
    (0x002b, &[0x2b], true), // equivalent of 0xab
    (0x002c, &[0x2c], true), // equivalent of 0xac
    (0x002d, &[0x2d], true), // equivalent of 0xad
    (0x002e, &[0x2e], true), // equivalent of 0xae
    (0x002f, &[0x2f], true), // equivalent of 0xaf
    (0x0030, &[0x30], false),
    (0x0031, &[0x31], false),
    (0x0032, &[0x32], false),
    (0x0033, &[0x33], false),
    (0x0034, &[0x34], false),
    (0x0035, &[0x35], false),
    (0x0036, &[0x36], false),
    (0x0037, &[0x37], false),
    (0x0038, &[0x38], false),
    (0x0039, &[0x39], false),
    (0x003a, &[0x3a], true), // equivalent of 0xba
    (0x003b, &[0x3b], false),
    (0x003c, &[0x3c], true), // equivalent of 0xbc
    (0x003d, &[0x3d], true), // equivalent of 0xbd
    (0x003e, &[0x3e], true), // equivalent of 0xbe
    (0x003f, &[0x3f], false),
    (0x0040, &[0x40], false),
    (0x0041, &[0x41], false),
    (0x0042, &[0x42], false),
    (0x0043, &[0x43], false),
    (0x0044, &[0x44], false),
    (0x0045, &[0x45], false),
    (0x0046, &[0x46], false),
    (0x0047, &[0x47], false),
    (0x0048, &[0x48], false),
    (0x0049, &[0x49], false),
    (0x004a, &[0x4a], false),
    (0x004b, &[0x4b], false),
    (0x004c, &[0x4c], false),
    (0x004d, &[0x4d], false),
    (0x004e, &[0x4e], false),
    (0x004f, &[0x4f], false),
    (0x0050, &[0x50], false),
    (0x0051, &[0x51], false),
    (0x0052, &[0x52], false),
    (0x0053, &[0x53], false),
    (0x0054, &[0x54], false),
    (0x0055, &[0x55], false),
    (0x0056, &[0x56], false),
    (0x0057, &[0x57], false),
    (0x0058, &[0x58], false),
    (0x0059, &[0x59], false),
    (0x005a, &[0x5a], false),
    (0x005b, &[0x5b], true), // equivalent of 0xdb
    (0x005c, &[0x5c], true), // equivalent of 0xdc
    (0x005d, &[0x5d], true), // equivalent of 0xdd
    (0x005e, &[0x5e], true), // equivalent of 0xde
    (0x005f, &[0x5f], true), // equivalent of 0xdf
    (0x0060, &[0x60], false),
    (0x0061, &[0x61], false),
    (0x0062, &[0x62], false),
    (0x0063, &[0x63], false),
    (0x0064, &[0x64], false),
    (0x0065, &[0x65], false),
    (0x0066, &[0x66], false),
    (0x0067, &[0x67], false),
    (0x0068, &[0x68], false),
    (0x0069, &[0x69], false),
    (0x006a, &[0x6a], false),
    (0x006b, &[0x6b], false),
    (0x006c, &[0x6c], false),
    (0x006d, &[0x6d], false),
    (0x006e, &[0x6e], false),
    (0x006f, &[0x6f], false),
    (0x0070, &[0x70], false),
    (0x0071, &[0x71], false),
    (0x0072, &[0x72], false),
    (0x0073, &[0x73], false),
    (0x0074, &[0x74], false),
    (0x0075, &[0x75], false),
    (0x0076, &[0x76], false),
    (0x0077, &[0x77], false),
    (0x0078, &[0x78], false),
    (0x0079, &[0x79], false),
    (0x007a, &[0x7a], false),
    (0x007b, &[0x7b], true), // equivalent of 0xfb
    (0x007c, &[0x7c], true), // equivalent of 0xfc
    (0x007d, &[0x7d], true), // equivalent of 0xfd
    (0x007e, &[0x7e], false),
    (0x007f, &[0x7f], false),
    (0x00c4, &[0x80], false),
    (0x00a0, &[0x81], false),
    (0x00c7, &[0x82], false),
    (0x00c9, &[0x83], false),
    (0x00d1, &[0x84], false),
    (0x00d6, &[0x85], false),
    (0x00dc, &[0x86], false),
    (0x00e1, &[0x87], false),
    (0x00e0, &[0x88], false),
    (0x00e2, &[0x89], false),
    (0x00e4, &[0x8a], false),
    (0x06ba, &[0x8b], false),
    (0x00ab, &[0x8c], false),
    (0x00e7, &[0x8d], false),
    (0x00e9, &[0x8e], false),
    (0x00e8, &[0x8f], false),
    (0x00ea, &[0x90], false),
    (0x00eb, &[0x91], false),
    (0x00ed, &[0x92], false),
    (0x2026, &[0x93], false),
    (0x00ee, &[0x94], false),
    (0x00ef, &[0x95], false),
    (0x00f1, &[0x96], false),
    (0x00f3, &[0x97], false),
    (0x00bb, &[0x98], false),
    (0x00f4, &[0x99], false),
    (0x00f6, &[0x9a], false),
    (0x00f7, &[0x9b], false),
    (0x00fa, &[0x9c], false),
    (0x00f9, &[0x9d], false),
    (0x00fb, &[0x9e], false),
    (0x00fc, &[0x9f], false),
    (0x0020, &[0xa0], false),
    (0x0021, &[0xa1], false),
    (0x0022, &[0xa2], false),
    (0x0023, &[0xa3], false),
    (0x0024, &[0xa4], false),
    (0x066a, &[0xa5], false),
    (0x0026, &[0xa6], false),
    (0x0027, &[0xa7], false),
    (0x0028, &[0xa8], false),
    (0x0029, &[0xa9], false),
    (0x002a, &[0xaa], false),
    (0x002b, &[0xab], false),
    (0x060c, &[0xac], false),
    (0x002d, &[0xad], false),
    (0x002e, &[0xae], false),
    (0x002f, &[0xaf], false),
    (0x0660, &[0xb0], false),
    (0x0661, &[0xb1], false),
    (0x0662, &[0xb2], false),
    (0x0663, &[0xb3], false),
    (0x0664, &[0xb4], false),
    (0x0665, &[0xb5], false),
    (0x0666, &[0xb6], false),
    (0x0667, &[0xb7], false),
    (0x0668, &[0xb8], false),
    (0x0669, &[0xb9], false),
    (0x003a, &[0xba], false),
    (0x061b, &[0xbb], false),
    (0x003c, &[0xbc], false),
    (0x003d, &[0xbd], false),
    (0x003e, &[0xbe], false),
    (0x061f, &[0xbf], false),
    (0x274a, &[0xc0], false),
    (0x0621, &[0xc1], false),
    (0x0622, &[0xc2], false),
    (0x0623, &[0xc3], false),
    (0x0624, &[0xc4], false),
    (0x0625, &[0xc5], false),
    (0x0626, &[0xc6], false),
    (0x0627, &[0xc7], false),
    (0x0628, &[0xc8], false),
    (0x0629, &[0xc9], false),
    (0x062a, &[0xca], false),
    (0x062b, &[0xcb], false),
    (0x062c, &[0xcc], false),
    (0x062d, &[0xcd], false),
    (0x062e, &[0xce], false),
    (0x062f, &[0xcf], false),
    (0x0630, &[0xd0], false),
    (0x0631, &[0xd1], false),
    (0x0632, &[0xd2], false),
    (0x0633, &[0xd3], false),
    (0x0634, &[0xd4], false),
    (0x0635, &[0xd5], false),
    (0x0636, &[0xd6], false),
    (0x0637, &[0xd7], false),
    (0x0638, &[0xd8], false),
    (0x0639, &[0xd9], false),
    (0x063a, &[0xda], false),
    (0x005b, &[0xdb], false),
    (0x005c, &[0xdc], false),
    (0x005d, &[0xdd], false),
    (0x005e, &[0xde], false),
    (0x005f, &[0xdf], false),
    (0x0640, &[0xe0], false),
    (0x0641, &[0xe1], false),
    (0x0642, &[0xe2], false),
    (0x0643, &[0xe3], false),
    (0x0644, &[0xe4], false),
    (0x0645, &[0xe5], false),
    (0x0646, &[0xe6], false),
    (0x0647, &[0xe7], false),
    (0x0648, &[0xe8], false),
    (0x0649, &[0xe9], false),
    (0x064a, &[0xea], false),
    (0x064b, &[0xeb], false),
    (0x064c, &[0xec], false),
    (0x064d, &[0xed], false),
    (0x064e, &[0xee], false),
    (0x064f, &[0xef], false),
    (0x0650, &[0xf0], false),
    (0x0651, &[0xf1], false),
    (0x0652, &[0xf2], false),
    (0x067e, &[0xf3], false),
    (0x0679, &[0xf4], false),
    (0x0686, &[0xf5], false),
    (0x06d5, &[0xf6], false),
    (0x06a4, &[0xf7], false),
    (0x06af, &[0xf8], false),
    (0x0688, &[0xf9], false),
    (0x0691, &[0xfa], false),
    (0x007b, &[0xfb], false),
    (0x007c, &[0xfc], false),
    (0x007d, &[0xfd], false),
    (0x0698, &[0xfe], false),
    (0x06d2, &[0xff], false),
];

#[test]
fn decode() -> Result<(), ErrorTrace> {
    for (expected_code_point, test_byte_string, _) in MAC_ARABIC_TEST_VECTOR.iter() {
        let mut decoder: DecoderMacArabic = DecoderMacArabic::new(test_byte_string);

        let test_code_point: u32 = match decoder.next() {
            Some(Ok(code_point)) => code_point,
            Some(Err(error)) => return Err(error),
            None => {
                return Err(keramics_core::error_trace_new!(format!(
                    "Failed to decode MacArabic as code_point: U+{:04x}",
                    *expected_code_point as u32
                )));
            }
        };
        assert_eq!(test_code_point, *expected_code_point);
    }
    Ok(())
}

#[test]
fn encode() -> Result<(), ErrorTrace> {
    for (test_code_point, expected_byte_string, is_duplicate) in MAC_ARABIC_TEST_VECTOR.iter() {
        let code_points: [u32; 1] = [*test_code_point];
        let mut encoder: EncoderMacArabic = EncoderMacArabic::new(&code_points);

        let test_byte_string: Vec<u8> = match encoder.next() {
            Some(Ok(byte_string)) => byte_string,
            Some(Err(error)) => return Err(error),
            None => {
                return Err(keramics_core::error_trace_new!(format!(
                    "Failed to encode code point: U+{:04x} as MacArabic",
                    *test_code_point as u32
                )));
            }
        };
        if !is_duplicate {
            assert_eq!(test_byte_string, *expected_byte_string);
        }
    }
    Ok(())
}
